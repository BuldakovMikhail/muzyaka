// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	models "src/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockMusicianRepository is a mock of MusicianRepository interface.
type MockMusicianRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMusicianRepositoryMockRecorder
}

// MockMusicianRepositoryMockRecorder is the mock recorder for MockMusicianRepository.
type MockMusicianRepositoryMockRecorder struct {
	mock *MockMusicianRepository
}

// NewMockMusicianRepository creates a new mock instance.
func NewMockMusicianRepository(ctrl *gomock.Controller) *MockMusicianRepository {
	mock := &MockMusicianRepository{ctrl: ctrl}
	mock.recorder = &MockMusicianRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMusicianRepository) EXPECT() *MockMusicianRepositoryMockRecorder {
	return m.recorder
}

// AddMusician mocks base method.
func (m *MockMusicianRepository) AddMusician(musician *models.Musician) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMusician", musician)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMusician indicates an expected call of AddMusician.
func (mr *MockMusicianRepositoryMockRecorder) AddMusician(musician interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMusician", reflect.TypeOf((*MockMusicianRepository)(nil).AddMusician), musician)
}

// DeleteMusician mocks base method.
func (m *MockMusicianRepository) DeleteMusician(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMusician", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMusician indicates an expected call of DeleteMusician.
func (mr *MockMusicianRepositoryMockRecorder) DeleteMusician(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMusician", reflect.TypeOf((*MockMusicianRepository)(nil).DeleteMusician), id)
}

// GetMusician mocks base method.
func (m *MockMusicianRepository) GetMusician(id uint64) (*models.Musician, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusician", id)
	ret0, _ := ret[0].(*models.Musician)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusician indicates an expected call of GetMusician.
func (mr *MockMusicianRepositoryMockRecorder) GetMusician(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusician", reflect.TypeOf((*MockMusicianRepository)(nil).GetMusician), id)
}

// GetMusicianIdForUser mocks base method.
func (m *MockMusicianRepository) GetMusicianIdForUser(userId uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMusicianIdForUser", userId)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMusicianIdForUser indicates an expected call of GetMusicianIdForUser.
func (mr *MockMusicianRepositoryMockRecorder) GetMusicianIdForUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMusicianIdForUser", reflect.TypeOf((*MockMusicianRepository)(nil).GetMusicianIdForUser), userId)
}

// UpdateMusician mocks base method.
func (m *MockMusicianRepository) UpdateMusician(musician *models.Musician) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMusician", musician)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMusician indicates an expected call of UpdateMusician.
func (mr *MockMusicianRepositoryMockRecorder) UpdateMusician(musician interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMusician", reflect.TypeOf((*MockMusicianRepository)(nil).UpdateMusician), musician)
}
