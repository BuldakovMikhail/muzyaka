// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	models "src/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockTrackRepository is a mock of TrackRepository interface.
type MockTrackRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTrackRepositoryMockRecorder
}

// MockTrackRepositoryMockRecorder is the mock recorder for MockTrackRepository.
type MockTrackRepositoryMockRecorder struct {
	mock *MockTrackRepository
}

// NewMockTrackRepository creates a new mock instance.
func NewMockTrackRepository(ctrl *gomock.Controller) *MockTrackRepository {
	mock := &MockTrackRepository{ctrl: ctrl}
	mock.recorder = &MockTrackRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackRepository) EXPECT() *MockTrackRepositoryMockRecorder {
	return m.recorder
}

// GetTrack mocks base method.
func (m *MockTrackRepository) GetTrack(id uint64) (*models.TrackMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrack", id)
	ret0, _ := ret[0].(*models.TrackMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrack indicates an expected call of GetTrack.
func (mr *MockTrackRepositoryMockRecorder) GetTrack(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrack", reflect.TypeOf((*MockTrackRepository)(nil).GetTrack), id)
}

// UpdateTrackOutbox mocks base method.
func (m *MockTrackRepository) UpdateTrackOutbox(track *models.TrackMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrackOutbox", track)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrackOutbox indicates an expected call of UpdateTrackOutbox.
func (mr *MockTrackRepositoryMockRecorder) UpdateTrackOutbox(track interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrackOutbox", reflect.TypeOf((*MockTrackRepository)(nil).UpdateTrackOutbox), track)
}
