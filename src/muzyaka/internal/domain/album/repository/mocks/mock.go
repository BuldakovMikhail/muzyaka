// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	models "src/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockAlbumRepository is a mock of AlbumRepository interface.
type MockAlbumRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAlbumRepositoryMockRecorder
}

// MockAlbumRepositoryMockRecorder is the mock recorder for MockAlbumRepository.
type MockAlbumRepositoryMockRecorder struct {
	mock *MockAlbumRepository
}

// NewMockAlbumRepository creates a new mock instance.
func NewMockAlbumRepository(ctrl *gomock.Controller) *MockAlbumRepository {
	mock := &MockAlbumRepository{ctrl: ctrl}
	mock.recorder = &MockAlbumRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlbumRepository) EXPECT() *MockAlbumRepositoryMockRecorder {
	return m.recorder
}

// AddAlbumWithTracksOutbox mocks base method.
func (m *MockAlbumRepository) AddAlbumWithTracksOutbox(album *models.Album, tracks []*models.TrackMeta) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAlbumWithTracksOutbox", album, tracks)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAlbumWithTracksOutbox indicates an expected call of AddAlbumWithTracksOutbox.
func (mr *MockAlbumRepositoryMockRecorder) AddAlbumWithTracksOutbox(album, tracks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAlbumWithTracksOutbox", reflect.TypeOf((*MockAlbumRepository)(nil).AddAlbumWithTracksOutbox), album, tracks)
}

// AddTrackToAlbumOutbox mocks base method.
func (m *MockAlbumRepository) AddTrackToAlbumOutbox(albumId uint64, track *models.TrackMeta) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrackToAlbumOutbox", albumId, track)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTrackToAlbumOutbox indicates an expected call of AddTrackToAlbumOutbox.
func (mr *MockAlbumRepositoryMockRecorder) AddTrackToAlbumOutbox(albumId, track interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrackToAlbumOutbox", reflect.TypeOf((*MockAlbumRepository)(nil).AddTrackToAlbumOutbox), albumId, track)
}

// DeleteAlbumOutbox mocks base method.
func (m *MockAlbumRepository) DeleteAlbumOutbox(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlbumOutbox", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlbumOutbox indicates an expected call of DeleteAlbumOutbox.
func (mr *MockAlbumRepositoryMockRecorder) DeleteAlbumOutbox(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlbumOutbox", reflect.TypeOf((*MockAlbumRepository)(nil).DeleteAlbumOutbox), id)
}

// DeleteTrackFromAlbumOutbox mocks base method.
func (m *MockAlbumRepository) DeleteTrackFromAlbumOutbox(albumId uint64, track *models.TrackMeta) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTrackFromAlbumOutbox", albumId, track)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrackFromAlbumOutbox indicates an expected call of DeleteTrackFromAlbumOutbox.
func (mr *MockAlbumRepositoryMockRecorder) DeleteTrackFromAlbumOutbox(albumId, track interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrackFromAlbumOutbox", reflect.TypeOf((*MockAlbumRepository)(nil).DeleteTrackFromAlbumOutbox), albumId, track)
}

// GetAlbum mocks base method.
func (m *MockAlbumRepository) GetAlbum(id uint64) (*models.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlbum", id)
	ret0, _ := ret[0].(*models.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlbum indicates an expected call of GetAlbum.
func (mr *MockAlbumRepositoryMockRecorder) GetAlbum(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlbum", reflect.TypeOf((*MockAlbumRepository)(nil).GetAlbum), id)
}

// GetAllTracksForAlbum mocks base method.
func (m *MockAlbumRepository) GetAllTracksForAlbum(albumId uint64) ([]*models.TrackMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTracksForAlbum", albumId)
	ret0, _ := ret[0].([]*models.TrackMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTracksForAlbum indicates an expected call of GetAllTracksForAlbum.
func (mr *MockAlbumRepositoryMockRecorder) GetAllTracksForAlbum(albumId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTracksForAlbum", reflect.TypeOf((*MockAlbumRepository)(nil).GetAllTracksForAlbum), albumId)
}

// UpdateAlbum mocks base method.
func (m *MockAlbumRepository) UpdateAlbum(album *models.Album) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlbum", album)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAlbum indicates an expected call of UpdateAlbum.
func (mr *MockAlbumRepositoryMockRecorder) UpdateAlbum(album interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlbum", reflect.TypeOf((*MockAlbumRepository)(nil).UpdateAlbum), album)
}
